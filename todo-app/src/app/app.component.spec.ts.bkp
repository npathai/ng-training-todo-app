import { TestBed, async, ComponentFixture, fakeAsync, tick } from '@angular/core/testing';
import { By } from '@angular/platform-browser';
import { DebugElement } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { AppComponent } from './app.component';

describe('AppComponent', () => {
  let fixture: ComponentFixture<AppComponent>;
  let component: AppComponent;

  beforeEach(async(() => {
    TestBed.configureTestingModule({
      imports: [FormsModule],
      declarations: [
        AppComponent
      ],
    }).compileComponents();
  }));

  beforeEach(async() => {
    this.fixture = TestBed.createComponent(AppComponent);
    this.component = this.fixture.componentInstance;
  });

  it('should render title in a h1 tag',() => {
    this.fixture.detectChanges();
    const compiled = this.fixture.nativeElement;
    expect(compiled.querySelector('h1').innerText).toContain(this.component.title);
  });

  it('should render todos', () => {
    this.fixture.detectChanges();
    let elements: DebugElement[] = this.fixture.debugElement.queryAll(By.css('.todo'));
    expect(elements.length).toBe(3);
    expect(elements[0].nativeElement.innerText).toBe('Todo 1');
    expect(elements[1].nativeElement.innerText).toBe('Todo 2');
    expect(elements[2].nativeElement.innerText).toBe('Todo 3');
  });

  it('should add a new todo at the end of the list', async(() => {
    const operation = new ComponentOperation(this.fixture);
    operation.setTodo('New Task').then(() => {

      operation.submit();

      this.fixture.detectChanges();

      let elements: DebugElement[] = operation.getTodos();
      expect(elements.length).toBe(4);
      expect(elements[3].nativeElement.innerText).toBe('New Task');
    });
  }));

  // it('should reset', () => {
  //   const operation = new ComponentOperation(this.fixture);
  //   operation.setTodo('New Task').then(() => {
  //
  //     operation.submit();
  //
  //     this.fixture.detectChanges();
  //
  //     let todo: DebugElement = operation.getTodo();
  //     expect(todo.nativeElement.value).toBe('asdf');
  //   });
  // });

  class ComponentOperation {
    form: DebugElement;

    constructor(private fixture: ComponentFixture<AppComponent>) {
        this.form = this.fixture.debugElement.query(By.css('#todo-form'));
    }

    getTodo() : DebugElement {
      return this.fixture.debugElement.query(By.css('#todo-form > input'));
    }

    setTodo(todo: string): Promise<void> {
      let taskInput = this.getTodo();
      taskInput.nativeElement.value = todo;

      this.fixture.detectChanges();

      return this.fixture.whenStable()
    }

    getTodos(): DebugElement[] {
      return this.fixture.debugElement.queryAll(By.css('.todo'));
    }

    submit() {
      this.form.triggerEventHandler('submit', null);
    }
  }

});
